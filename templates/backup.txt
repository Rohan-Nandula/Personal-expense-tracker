from flask import Flask, render_template, request, redirect, url_for, session, Response
from flask_login import logout_user
import requests
import boto3
import json
from flask import jsonify

app = Flask(__name__)


def setExpenses(user,expensedate,category,request):
    if(category=='medical_expenses'):
        medical_expenses = request.form['expenseamount']
        params = "user="+user+"&expense_date="+expensedate+"&medical_expenses="+medical_expenses+"&home_expenses="+"0"+"&vehicle_expenses="+"0"
    elif(category=='home_expenses'):
        home_expenses = request.form['expenseamount']
        params = "user="+user+"&expense_date="+expensedate+"&medical_expenses="+"0"+"&home_expenses="+home_expenses+"&vehicle_expenses="+"0"
    elif(category=='vehicle_expenses'):
        vehicle_expenses = request.form['expenseamount']
        params = "user="+user+"&expense_date="+expensedate+"&medical_expenses="+"0"+"&home_expenses="+"0"+"&vehicle_expenses="+vehicle_expenses
    else:
        return render_template('expense.html', pred="Invalid Expense type. Expense is not updated")
	
    print(params)
    url = "https://ket0h58q15.execute-api.ap-south-1.amazonaws.com/ExpenseAPI?"+params
    status = requests.request("GET",url)
    print(status.json())
    return status.json()
    
def fetchExpenses(user,expense_date_from,expense_date_to):
    url="https://5996kr662d.execute-api.ap-south-1.amazonaws.com/ExpenseQA?user="+user
    status = requests.request("GET",url)
    print(status.json())
    return status.json()

#For Remote AWS API user check this function is called
def check(user):
    url = "https://nirmgp3j2c.execute-api.ap-south-1.amazonaws.com/fetchuser?user="+user  
    status = requests.request("GET",url)
    print(status.json())
    return status.json()

@app.route('/')
def homepage():
    title = "Personal Expense Tracker"    
    return render_template("index.html", title = title)

@app.route('/graph')
def graph(chartID = 'chart_ID', chart_type = 'line', chart_height = 500):
    user='nbalu@gmail.com'
    series_new=fetchExpenses(user,'','')
    print(type(series_new))	
    subtitleText = 'Expense Summary'
    pageType = 'graph'
    chart = {"renderTo": chartID, "type": chart_type, "height": chart_height}
    #series = jsonList
    #xAxis = Response(jsonList['expense_date'], mimeType="application/json")
    yAxis = {"title": {"text": 'Expense'}}
    return render_template('Login1.html')
    #return render_template('graph.html', chartID=chartID, chart=chart, series=series, title=title, xAxis=xAxis, yAxis=yAxis, pageType=pageType)
	
@app.route('/login')
def login():
    return render_template('Login1.html')

@app.route('/loginpage', methods=['POST'])
def loginpage():
    user = request.form['user']
    passw = request.form['passw']
    print(user,passw)
    data = check(user)
    if('errorType' in data):
        return render_template('Login1.html', pred="The username is not found, recheck the spelling or please register.")
    else:
        if(passw==data['passw']):
            return redirect(url_for('graph'))
        else:
            return render_template('Login1.html', pred="Login unsuccessful. You have entered the wrong password.")
    
@app.route('/expense')
def expense():
    return render_template('expense.html')

@app.route('/expensepage', methods=['POST'])
def expensepage() :
    user=request.form['user']
    expensedate = request.form['expensedate']
    category = request.form['expensetype']
    
    response = setExpenses(user,expensedate,category,request)
    json_object = json.dumps(response)
    print(json_object)
    	
    if('errorType' in json_object):
    	return render_template('expense.html', pred="Expense could not be persisted successfully. Your wallet balance has not changed.")
    else:
    	return render_template('expense.html', pred="Update Expense successfully. Your wallet balance has been updated.")
    	     
	
@app.route('/registration')
def registration():
    return render_template('register.html')

@app.route('/register',methods=['GET','POST'])
def register():
    if request.method == 'POST':
	    name = request.form.get('name')
	    user = request.form.get('user')
	    phone = request.form.get('phone')
	    city = request.form.get('city')
	    occupation = request.form.get('occupation')
	    passw = request.form.get('passw')
	    #passparam = hash_password(passw)
	    #x = [x for x in request.form.values()]
	    #params = "name="+x[0]+"&user="+x[1]+"&phone="+x[2]+"&city="+x[3]+"&occupation="+x[4]+"&passw="+x[5]
	    params="name="+name+"&user="+user+"&phone="+phone+"&city="+city+"&occupation="+occupation+"&passw="+passw
	    if('errorType' in check(user)):
	    	url = "https://nqwsosw3ag.execute-api.ap-south-1.amazonaws.com/QA?"+params
	    	response = requests.get(url)
	    	return render_template('register.html', pred="Registration Successful, please login using your details")
	    else:
	    	return render_template('register.html', pred="You are already a member, please login using your details")
        
@app.route("/logout")
def logout():   
   logout_user()        # Delete Flask-Login's session cookie       
   return redirect(url_for('login'))        



if __name__ == "__main__":
    app.run(port=8500,debug=True,passthrough_errors=True)
    
{{url_for('static', filename='css/login.css')}}">